#ifndef _NINE_LIMITS_H_
#define _NINE_LIMITS_H_

#include "d3d9types.h"

struct nine_limits
{
    unsigned min;
    unsigned max;
};

#define __BOOLEAN_RS(o) \
    [D3DRS_##o] = {0, 1}

#define __VALUE_RS(o, m, M) \
    [D3DRS_##o] = {m, M}

static const struct nine_limits
render_state_limits_table[D3DRS_BLENDOPALPHA + 1] = {
    __VALUE_RS(ZENABLE, 0, 3),
    __VALUE_RS(FILLMODE, 1, 3),
    __VALUE_RS(SHADEMODE, 1, 3),
    __BOOLEAN_RS(ZWRITEENABLE),
    __BOOLEAN_RS(ALPHATESTENABLE),
    __BOOLEAN_RS(LASTPIXEL),
    __VALUE_RS(SRCBLEND, 1, 17),
    __VALUE_RS(DESTBLEND, 1, 17),
    __VALUE_RS(CULLMODE, 1, 3),
    __VALUE_RS(ZFUNC, 1, 8),
    __VALUE_RS(ALPHAREF, 0, 0x000000FF),
    __VALUE_RS(ALPHAFUNC, 1, 8),
    __BOOLEAN_RS(DITHERENABLE),
    __BOOLEAN_RS(ALPHABLENDENABLE),
    __BOOLEAN_RS(FOGENABLE),
    __BOOLEAN_RS(SPECULARENABLE),
    __VALUE_RS(FOGCOLOR, 0, 0xFFFFFFFF),
    __VALUE_RS(FOGTABLEMODE, 0, 3),
    __VALUE_RS(FOGSTART, 0, 0xFFFFFFFF), /* a bit more complex than that, lets ignore */
    __VALUE_RS(FOGEND, 0, 0xFFFFFFFF),
    __VALUE_RS(FOGDENSITY, 0, 0xFFFFFFFF), /* actually should be between 0.0 and 1.0 */
    __BOOLEAN_RS(RANGEFOGENABLE),
    __BOOLEAN_RS(STENCILENABLE),
    __VALUE_RS(STENCILFAIL, 1, 8),
    __VALUE_RS(STENCILZFAIL, 1, 8),
    __VALUE_RS(STENCILPASS, 1, 8),
    __VALUE_RS(STENCILFUNC, 1, 8),
    __VALUE_RS(STENCILREF, 0, 0xFFFFFFFF),
    __VALUE_RS(STENCILMASK, 0, 0xFFFFFFFF),
    __VALUE_RS(STENCILWRITEMASK, 0, 0xFFFFFFFF),
    __VALUE_RS(TEXTUREFACTOR, 0, 0xFFFFFFFF),
    __VALUE_RS(WRAP0, 0, 15),
    __VALUE_RS(WRAP1, 0, 15),
    __VALUE_RS(WRAP2, 0, 15),
    __VALUE_RS(WRAP3, 0, 15),
    __VALUE_RS(WRAP4, 0, 15),
    __VALUE_RS(WRAP5, 0, 15),
    __VALUE_RS(WRAP6, 0, 15),
    __VALUE_RS(WRAP7, 0, 15),
    __BOOLEAN_RS(CLIPPING),
    __BOOLEAN_RS(LIGHTING),
    __VALUE_RS(AMBIENT, 0, 0xFFFFFFFF),
    __VALUE_RS(FOGVERTEXMODE, 0, 3),
    __BOOLEAN_RS(COLORVERTEX),
    __BOOLEAN_RS(LOCALVIEWER),
    __BOOLEAN_RS(NORMALIZENORMALS),
    __VALUE_RS(DIFFUSEMATERIALSOURCE, 0, 2),
    __VALUE_RS(SPECULARMATERIALSOURCE, 0, 2),
    __VALUE_RS(AMBIENTMATERIALSOURCE, 0, 2),
    __VALUE_RS(EMISSIVEMATERIALSOURCE, 0, 2),
    __VALUE_RS(VERTEXBLEND, 0, 256), /* values between 4 and 254 -both included- are forbidden too */
    __VALUE_RS(CLIPPLANEENABLE, 0, 0xFFFFFFFF), /* expected check seems more complex than that */
    __VALUE_RS(POINTSIZE, 0, 0xFFFFFFFF),
    __VALUE_RS(POINTSIZE_MIN, 0, 0x7FFFFFFF), /* float >= 0.0 */
    __BOOLEAN_RS(POINTSPRITEENABLE),
    __BOOLEAN_RS(POINTSCALEENABLE),
    __VALUE_RS(POINTSCALE_A, 0, 0x7FFFFFFF), /* float >= 0.0 */
    __VALUE_RS(POINTSCALE_B, 0, 0x7FFFFFFF), /* float >= 0.0 */
    __VALUE_RS(POINTSCALE_C, 0, 0x7FFFFFFF), /* float >= 0.0 */
    __BOOLEAN_RS(MULTISAMPLEANTIALIAS),
    __VALUE_RS(MULTISAMPLEMASK, 0, 0xFFFFFFFF),
    __VALUE_RS(PATCHEDGESTYLE, 0, 1),
    __VALUE_RS(DEBUGMONITORTOKEN, 0, 1),
    __VALUE_RS(POINTSIZE_MAX, 0, 0x7FFFFFFF), /* check more complex than that */
    __BOOLEAN_RS(INDEXEDVERTEXBLENDENABLE),
    __VALUE_RS(COLORWRITEENABLE, 0, 15),
    __VALUE_RS(TWEENFACTOR, 0, 0xFFFFFFFF),
    __VALUE_RS(BLENDOP, 1, 5),
    __VALUE_RS(POSITIONDEGREE, 1, 5), /* can actually be only 1 or 5 */
    __VALUE_RS(NORMALDEGREE, 1, 2),
    __BOOLEAN_RS(SCISSORTESTENABLE),
    __VALUE_RS(SLOPESCALEDEPTHBIAS, 0, 0xFFFFFFFF),
    __BOOLEAN_RS(ANTIALIASEDLINEENABLE),
    __VALUE_RS(MINTESSELLATIONLEVEL, 0, 0xFFFFFFFF),
    __VALUE_RS(MAXTESSELLATIONLEVEL, 0, 0xFFFFFFFF),
    __VALUE_RS(ADAPTIVETESS_X, 0, 0xFFFFFFFF),
    __VALUE_RS(ADAPTIVETESS_Y, 0, 0xFFFFFFFF),
    __VALUE_RS(ADAPTIVETESS_Z, 0, 0xFFFFFFFF),
    __VALUE_RS(ADAPTIVETESS_W, 0, 0xFFFFFFFF),
    __BOOLEAN_RS(ENABLEADAPTIVETESSELLATION),
    __BOOLEAN_RS(TWOSIDEDSTENCILMODE),
    __VALUE_RS(CCW_STENCILFAIL, 1, 8),
    __VALUE_RS(CCW_STENCILZFAIL, 1, 8),
    __VALUE_RS(CCW_STENCILPASS, 1, 8),
    __VALUE_RS(CCW_STENCILFUNC, 1, 8),
    __VALUE_RS(COLORWRITEENABLE1, 0, 15),
    __VALUE_RS(COLORWRITEENABLE2, 0, 15),
    __VALUE_RS(COLORWRITEENABLE3, 0, 15),
    __VALUE_RS(BLENDFACTOR, 0, 0xFFFFFFFF),
    __BOOLEAN_RS(SRGBWRITEENABLE),
    __VALUE_RS(DEPTHBIAS, 0, 0xFFFFFFFF),
    __VALUE_RS(WRAP8, 0, 15),
    __VALUE_RS(WRAP9, 0, 15),
    __VALUE_RS(WRAP10, 0, 15),
    __VALUE_RS(WRAP11, 0, 15),
    __VALUE_RS(WRAP12, 0, 15),
    __VALUE_RS(WRAP13, 0, 15),
    __VALUE_RS(WRAP14, 0, 15),
    __VALUE_RS(WRAP15, 0, 15),
    __BOOLEAN_RS(SEPARATEALPHABLENDENABLE),
    __VALUE_RS(SRCBLENDALPHA, 1, 17),
    __VALUE_RS(DESTBLENDALPHA, 1, 17),
    __VALUE_RS(BLENDOPALPHA, 1, 5)
};

static BOOL inline
nine_check_render_state_value(D3DRENDERSTATETYPE State,
                              DWORD Value)
{
    struct nine_limits limit;

    limit = render_state_limits_table[State];
    return (limit.min <= Value && Value <= limit.max);
}

#endif /* _NINE_HELPERS_H_ */

