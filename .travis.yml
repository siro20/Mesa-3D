language: c

dist: xenial

cache:
  apt: true
  ccache: true

env:
  global:
    - XORG_RELEASES=https://xorg.freedesktop.org/releases/individual
    - XCB_RELEASES=https://xcb.freedesktop.org/dist
    - WAYLAND_RELEASES=https://wayland.freedesktop.org/releases
    - XORGMACROS_VERSION=util-macros-1.19.0
    - GLPROTO_VERSION=glproto-1.4.17
    - DRI2PROTO_VERSION=dri2proto-2.8
    - LIBPCIACCESS_VERSION=libpciaccess-0.13.4
    - LIBDRM_VERSION=libdrm-2.4.95
    - XCBPROTO_VERSION=xcb-proto-1.13
    - RANDRPROTO_VERSION=randrproto-1.3.0
    - LIBXRANDR_VERSION=libXrandr-1.3.0
    - LIBXCB_VERSION=libxcb-1.13
    - LIBXSHMFENCE_VERSION=libxshmfence-1.2
    - LIBVDPAU_VERSION=libvdpau-1.1
    - LIBVA_VERSION=libva-1.7.0
    - LIBWAYLAND_VERSION=wayland-1.15.0
    - WAYLAND_PROTOCOLS_VERSION=wayland-protocols-1.8
    - PKG_CONFIG_PATH=$HOME/prefix/lib/pkgconfig:$HOME/prefix/share/pkgconfig
    - LD_LIBRARY_PATH="$HOME/prefix/lib:$LD_LIBRARY_PATH"
    - PATH="$HOME/prefix/bin:$PATH"

matrix:
  include:
    - env:
        - LABEL="meson Gallium ST Other"
        - BUILD=meson
        - LLVM_VERSION=6.0
        - UNWIND="true"
        - LLVM_CONFIG="llvm-config-${LLVM_VERSION}"
        - DRI_LOADERS="-Dglx=dri -Dgbm=true -Degl=true -Dplatforms=x11,wayland,drm,surfaceless -Dosmesa=classic"
        - DRI_DRIVERS="i915,i965,r100,r200,nouveau"
        - GALLIUM_ST="-Dosmesa=gallium -Ddri3=true -Dgallium-vdpau=true -Dgallium-xvmc=true -Dgallium-omx=disabled -Dgallium-va=true -Dgallium-xa=true -Dgallium-nine=true -Dgallium-opencl=disabled"
        # We need swrast for osmesa and nine.
        # Regardless - we're doing a quick build test here.
        - GALLIUM_DRIVERS="nouveau,pl111,r300,r600,freedreno,svga,swrast,v3d,vc4,virgl,etnaviv,imx"
        - VULKAN_DRIVERS=""
      addons:
        apt:
          packages:
            - llvm-6.0-dev
            - libxvmc-dev
            # Build locally, for now.
            #- libvdpau-dev
            #- libva-dev
            - x11proto-xf86vidmode-dev
            # LLVM packaging is broken and misses these dependencies
            - libedit-dev
            # Common
            - xz-utils
            - libexpat1-dev
            - libx11-xcb-dev
            - libxxf86vm-dev
            - libxdamage-dev
            - libxfixes-dev
            - libelf-dev
            - libunwind8-dev
            - python3-pip
            - python3-setuptools

before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      HOMEBREW_NO_AUTO_UPDATE=1 brew install python3 ninja expat gettext
      # Set PATH for homebrew pip3 installs
      PATH="$HOME/Library/Python/3.6/bin:${PATH}"
      # Set PKG_CONFIG_PATH for keg-only expat
      PKG_CONFIG_PATH="/usr/local/opt/expat/lib/pkgconfig:${PKG_CONFIG_PATH}"
      # Set PATH for keg-only gettext
      PATH="/usr/local/opt/gettext/bin:${PATH}"

      # Install xquartz for prereqs ...
      XQUARTZ_VERSION="2.7.11"
      wget -nv https://dl.bintray.com/xquartz/downloads/XQuartz-${XQUARTZ_VERSION}.dmg
      hdiutil attach XQuartz-${XQUARTZ_VERSION}.dmg
      sudo installer -pkg /Volumes/XQuartz-${XQUARTZ_VERSION}/XQuartz.pkg -target /
      hdiutil detach /Volumes/XQuartz-${XQUARTZ_VERSION}
      # ... and set paths
      PATH="/opt/X11/bin:${PATH}"
      PKG_CONFIG_PATH="/opt/X11/share/pkgconfig:/opt/X11/lib/pkgconfig:${PKG_CONFIG_PATH}"
      ACLOCAL="aclocal -I /opt/X11/share/aclocal -I /usr/local/share/aclocal"
    fi

install:
  # Install a more modern meson from pip, since the version in the
  # ubuntu repos is often quite old.
  - if test "x$BUILD" = xmeson; then
      pip3 install --user meson;
      pip3 install --user mako;
    fi

  # Install autotools build dependencies
  - if test "x$BUILD" = xmake; then
      pip2 install --user mako;
    fi

  # Install a more modern scons from pip.
  - if test "x$BUILD" = xscons; then
      pip2 install --user "scons>=2.4";
      pip2 install --user mako;
    fi

  # Install dependencies where we require specific versions (or where
  # disallowed by Travis CI's package whitelisting).

  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      wget $XORG_RELEASES/util/$XORGMACROS_VERSION.tar.bz2
      tar -jxvf $XORGMACROS_VERSION.tar.bz2
      (cd $XORGMACROS_VERSION && ./configure --prefix=$HOME/prefix && make install)

      wget $XORG_RELEASES/proto/$GLPROTO_VERSION.tar.bz2
      tar -jxvf $GLPROTO_VERSION.tar.bz2
      (cd $GLPROTO_VERSION && ./configure --prefix=$HOME/prefix && make install)

      wget $XORG_RELEASES/proto/$DRI2PROTO_VERSION.tar.bz2
      tar -jxvf $DRI2PROTO_VERSION.tar.bz2
      (cd $DRI2PROTO_VERSION && ./configure --prefix=$HOME/prefix && make install)

      wget $XCB_RELEASES/$XCBPROTO_VERSION.tar.bz2
      tar -jxvf $XCBPROTO_VERSION.tar.bz2
      (cd $XCBPROTO_VERSION && ./configure --prefix=$HOME/prefix && make install)

      wget $XCB_RELEASES/$LIBXCB_VERSION.tar.bz2
      tar -jxvf $LIBXCB_VERSION.tar.bz2
      (cd $LIBXCB_VERSION && ./configure --prefix=$HOME/prefix && make install)

      wget $XORG_RELEASES/lib/$LIBPCIACCESS_VERSION.tar.bz2
      tar -jxvf $LIBPCIACCESS_VERSION.tar.bz2
      (cd $LIBPCIACCESS_VERSION && ./configure --prefix=$HOME/prefix && make install)

      wget https://dri.freedesktop.org/libdrm/$LIBDRM_VERSION.tar.bz2
      tar -jxvf $LIBDRM_VERSION.tar.bz2
      (cd $LIBDRM_VERSION && ./configure --prefix=$HOME/prefix --enable-vc4 --enable-freedreno --enable-etnaviv-experimental-api && make install)

      wget $XORG_RELEASES/proto/$RANDRPROTO_VERSION.tar.bz2
      tar -jxvf $RANDRPROTO_VERSION.tar.bz2
      (cd $RANDRPROTO_VERSION && ./configure --prefix=$HOME/prefix && make install)

      wget $XORG_RELEASES/lib/$LIBXRANDR_VERSION.tar.bz2
      tar -jxvf $LIBXRANDR_VERSION.tar.bz2
      (cd $LIBXRANDR_VERSION && ./configure --prefix=$HOME/prefix && make install)

      wget $XORG_RELEASES/lib/$LIBXSHMFENCE_VERSION.tar.bz2
      tar -jxvf $LIBXSHMFENCE_VERSION.tar.bz2
      (cd $LIBXSHMFENCE_VERSION && ./configure --prefix=$HOME/prefix && make install)

      wget https://people.freedesktop.org/~aplattner/vdpau/$LIBVDPAU_VERSION.tar.bz2
      tar -jxvf $LIBVDPAU_VERSION.tar.bz2
      (cd $LIBVDPAU_VERSION && ./configure --prefix=$HOME/prefix && make install)

      wget https://www.freedesktop.org/software/vaapi/releases/libva/$LIBVA_VERSION.tar.bz2
      tar -jxvf $LIBVA_VERSION.tar.bz2
      (cd $LIBVA_VERSION && ./configure --prefix=$HOME/prefix --disable-wayland --disable-dummy-driver && make install)

      wget $WAYLAND_RELEASES/$LIBWAYLAND_VERSION.tar.xz
      tar -axvf $LIBWAYLAND_VERSION.tar.xz
      (cd $LIBWAYLAND_VERSION && ./configure --prefix=$HOME/prefix --enable-libraries --without-host-scanner --disable-documentation --disable-dtd-validation && make install)

      wget $WAYLAND_RELEASES/$WAYLAND_PROTOCOLS_VERSION.tar.xz
      tar -axvf $WAYLAND_PROTOCOLS_VERSION.tar.xz
      (cd $WAYLAND_PROTOCOLS_VERSION && ./configure --prefix=$HOME/prefix && make install)

      # Meson requires ninja >= 1.6, but xenial has 1.3.x
      wget https://github.com/ninja-build/ninja/releases/download/v1.6.0/ninja-linux.zip
      unzip ninja-linux.zip
      mv ninja $HOME/prefix/bin/

      # Generate this header since one is missing on the Travis instance
      mkdir -p linux
      printf "%s\n" \
           "#ifndef _LINUX_MEMFD_H" \
           "#define _LINUX_MEMFD_H" \
           "" \
           "#define MFD_CLOEXEC             0x0001U" \
           "#define MFD_ALLOW_SEALING       0x0002U" \
           "" \
           "#endif /* _LINUX_MEMFD_H */" > linux/memfd.h

      # Generate this header, including the missing SYS_memfd_create
      # macro, which is not provided by the header in the Travis
      # instance
      mkdir -p sys
      printf "%s\n" \
           "#ifndef _SYSCALL_H" \
           "#define _SYSCALL_H      1" \
           "" \
           "#include <asm/unistd.h>" \
           "" \
           "#ifndef _LIBC" \
           "# include <bits/syscall.h>" \
           "#endif" \
           "" \
           "#ifndef __NR_memfd_create" \
           "# define __NR_memfd_create 319 /* Taken from <asm/unistd_64.h> */" \
           "#endif" \
           "" \
           "#ifndef SYS_memfd_create" \
           "# define SYS_memfd_create __NR_memfd_create" \
           "#endif" \
           "" \
           "#endif" > sys/syscall.h
    fi

script:
  - if test "x$BUILD" = xmake; then
      export CFLAGS="$CFLAGS -isystem`pwd`";

      mkdir build &&
      cd build &&
      ../autogen.sh --enable-debug
        $LIBUNWIND_FLAGS
        $DRI_LOADERS
        --with-dri-drivers=$DRI_DRIVERS
        $GALLIUM_ST
        --with-gallium-drivers=$GALLIUM_DRIVERS
        --with-vulkan-drivers=$VULKAN_DRIVERS
        --disable-llvm-shared-libs
        &&
      make && eval $MAKE_CHECK_COMMAND;
    fi

  - if test "x$BUILD" = xscons; then
      scons $SCONS_TARGET && eval $SCONS_CHECK_COMMAND;
    fi

  - |
    if test "x$BUILD" = xmeson; then
      if test -n "$LLVM_CONFIG"; then
        # We need to control the version of llvm-config we're using, so we'll
        # generate a native file to do so. This requires meson >=0.49
        #
        echo -e "[binaries]\nllvm-config = '`which $LLVM_CONFIG`'" > native.file

        $LLVM_CONFIG --version
      else
        : > native.file
      fi

      export CFLAGS="$CFLAGS -isystem`pwd`"
      meson _build \
                   --native-file=native.file \
                   -Dbuild-tests=true \
                   -Dlibunwind=${UNWIND} \
                   ${DRI_LOADERS} \
                   -Ddri-drivers=${DRI_DRIVERS:-[]} \
                   ${GALLIUM_ST} \
                   -Dgallium-drivers=${GALLIUM_DRIVERS:-[]} \
                   -Dvulkan-drivers=${VULKAN_DRIVERS:-[]}
      meson configure _build
      ninja -C _build
      ninja -C _build test
    fi

